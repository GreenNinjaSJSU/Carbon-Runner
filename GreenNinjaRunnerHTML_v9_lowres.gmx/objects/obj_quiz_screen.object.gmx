<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>actual_answers = 0

if global.js &gt; 0
answer = 0

qn = 0
correct_answers = 0
tab = 1
answer = 0
//correct_answer = 2

questions = 0

question[0] = "What causes global warming?"
current_question = irandom(9)
answers = 4

if room = rm_quiz_screen
    fname = "questions.txt"

if room = rm_super_quiz
    fname = "questions2.txt"

if file_exists(fname)
    {
    read_str = file_contents(fname)
    //read_str = string_replace_all(read_str , ", ,",",,")
    
    while (string_length(read_str) &gt; 1)
        {        
        next_question = string_copy_until_char(read_str,1,',')
        read_str = string_replace(read_str , next_question+',' , '')
        
        next_answer1 = string_copy_until_char(read_str,1,',')
        read_str = string_replace(read_str , next_answer1+',' , '')
        
        next_answer2 = string_copy_until_char(read_str,1,',')
        read_str = string_replace(read_str , next_answer2+',' , '')
        
        next_answer3 = string_copy_until_char(read_str,1,',')
        read_str = string_replace(read_str , next_answer3+',' , '')
        
        next_answer4 = string_copy_until_char(read_str,1,',')
        read_str = string_replace(read_str , next_answer4+',' , '')
        
        next_correct_answer = string_copy_until_char(read_str,1,',')
        read_str = string_replace(read_str , next_correct_answer+',' , '')
        
        scr_add_question(next_question,next_answer1,next_answer2,next_answer3,next_answer4,real(next_correct_answer))
        
        /*
show_message(next_question)
show_message(next_answer1)
show_message(next_answer2)
show_message(next_answer3)
show_message(next_answer4)
show_message(next_correct_answer)
        */
        //read_names = string_replace(read_names , next_name+',' , '')
        //read_passwords = string_replace(read_passwords , next_password+',' , '')
        
        //scr_add_user(next_name , next_password)
        }
    }
current_question = irandom(questions-1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_shorter_view_names()
draw_set_color(c_black)
draw_set_alpha(.7)
draw_rectangle(vxc - 600 , vyc - 300 , vxc + 600 , vyc + 300 , 0)
draw_set_alpha(1)

scr_game_end()

if tab = 1
    {
    if keyboard_check_pressed(vk_down)
        {
        if answer &lt; actual_answers - 1
        answer++
        audio_play_sound(snd_cursor_move,0,0)
        }
    if keyboard_check_pressed(vk_up)
        {
        if answer &gt; 0
        answer--
        audio_play_sound(snd_cursor_move,0,0)
        }
    
    if global.js &gt; 0
        {
        if global.jdown_pressed[0]
            {
            if answer &lt; actual_answers - 1
            answer++
            audio_play_sound(snd_cursor_move,0,0)
            }
        if global.jup_pressed[0]
            {
            if answer &gt; 0
            answer--
            audio_play_sound(snd_cursor_move,0,0)
            }
        //if answer &lt; 0 answer = 0 //answers - 1
        //if answer &gt;= answers answer = answers - 1
        }
    if qn &lt; 10
        {
        draw_set_halign(fa_left)
        draw_set_valign(fa_top) 
        draw_set_font(fnt_24)
        //draw_sprite(spr_message_large,0,room_width/2,room_height/2)
        draw_set_color(c_white)
        
        if room = rm_quiz_screen
            {
            draw_text(room_width/2 - 480 , room_height/2 - 240, "Answer this bonus question correctly to get $100 more Carbon Cash!") //, c_black,c_white)
            }
        
        if room = rm_super_quiz
            {
            draw_set_halign(fa_center)
            draw_text(room_width/2 , room_height/2 - 250, "FINAL SUPER NINJA EXAM#Question "+string(qn+1)+" / 10") //, c_black,c_white)
            //draw_text(room_width/2, room_height/2 + 240 , "Answer all the questions correctly to unlock the ultimate Green Ninja Upgrade!")
            }
        //
        //"Answer this question correctly to get $100 more Carbon Cash!##"+
        tstr = question[current_question]
        draw_set_halign(fa_left)
        scr_paragraph(tstr,room_width/2 - 445 , room_height/2 - 210 + 50, 800, c_white)
        if answer &gt; -1
        if button(spr_button,room_width/2 - 160,room_height / 2 + 220, 320,48,'Submit',-1,0,'')
            || keyboard_check_pressed(vk_enter) || global.jpressed[0,1]
            {
            audio_play_sound(snd_button_press,0,0)
            if room = rm_quiz_screen
                {
                tab = 2
                if answer = correct_answer[current_question]
                    {
                    //if global.sound_on
                    //audio_play_sound(snd_chaching,1,0)
                    global.carbon_cash += 100
                    }
                }
            else
                {
                qn++
                if answer = correct_answer[current_question]
                    correct_answers++
                current_question++
                if current_question &gt;= questions
                    current_question = 0
                answer = -1
                }
            exit
            
            }
        /*
           if keyboard_check_pressed(ord("T"))
            {
            qn = 10
            correct_answers = 10
            }    
           if keyboard_check_pressed(ord("Y"))
            {
            qn = 10
            correct_answers = 9
            }    
        */
        draw_set_halign(fa_left)
        draw_set_valign(fa_center)
        actual_answers = 0
        if alarm[1] &lt; 0
            {
            cheat = 0 //keyboard_check(ord("C"))
            for(i=0 ; i &lt; answers; i++)
                {
                extra = cheat * (i == correct_answer[current_question]) * 10
            
                //spr_radio
                if answer_text[current_question,i] &gt; ""
                    {
                    actual_answers++
                    alphas = "ABCDEFG"
                    tstr = string_char_at(alphas,i+1)
                    //string(i+1)
                    if button_tab(spr_button_tab,room_width/2 - 420 - extra / 2,room_height / 2 - 64 - 40 + 64 * i + 50 - extra / 2,
                        840 + extra,48 + extra,"[" + tstr + "]  " + answer_text[current_question,i],-1,0,'',answer,i)
                         || global.jpressed[0,1] || keyboard_check_pressed(vk_enter)
                         {
                         answer = i
                         audio_play_sound(snd_button_press,0,0)
                         }
                    //draw_text(room_width/2 - 420 + 128,room_height / 2 - 64 - 40 + 64 * i + 24 + 50, answer_text[i]) //, c_black,c_white)
                    }
                }
            for(i=0 ; i &lt; answers; i++)
                {
                if keyboard_check_pressed(ord(string(i+1)))
                    {
                    answer = i
                    break;
                    }
                }
            }
        }
    else
        {
        draw_set_halign(fa_center)
        draw_set_valign(fa_top)
        draw_set_color(c_white)
        
        if correct_answers = 10
            {
            tstr = "Congratulations! You answered all the questions correctly#and unlocked the ultimate Green Ninja Upgrade!"
            global.passed_super_quiz = 1
            }
        else
            tstr = "FAIL. Looks like you will need to play the#game some more before you can pass this test."
            
        draw_text(room_width/2 , room_height/2 - 250, "FINAL SUPER NINJA EXAM RESULTS##SCORE: "+string(correct_answers)+" / 10##"+tstr) //, c_black,c_white)
        
        if button(spr_button,room_width/2 - 160,room_height / 2 + 220, 320,48,'Done',-1,0,'')
         || global.jpressed[0,1]
            || keyboard_check_pressed(vk_enter)
            {
            room = rm_upgrade
            }
        }
    }

if tab = 2 //SHOW IF ANSWER IS CORRECT TAB
    {
    //draw_sprite(spr_message_large,0,room_width/2,room_height/2)
    
    draw_set_halign(fa_center)
    draw_set_valign(fa_center)
    draw_set_font(fnt_24)  
    draw_set_color(c_white)
    if answer = correct_answer[current_question]
        {
        draw_sprite(spr_checkmark,0,room_width/2,room_height/2 - 128)
    
        draw_text(room_width/2  , room_height/2 , 'Your answer "'+string_lower(answer_text[current_question,answer])+'" is correct!#Congratulations! You made $100 Carbon Cash!') //, c_black,c_lime)
        }
    else
        {
        draw_sprite(spr_checkmark,1,room_width/2,room_height/2 - 128)
    
        draw_text(room_width/2 , room_height/2 , 'Your answer "'+string_lower(answer_text[current_question,answer])+'" is incorrect.#Better luck next time!') //, c_black,c_red)
        }
    if button(spr_button,room_width/2 - 160,room_height / 2 + 220, 320,48,'Continue',-1,0,'')
        || keyboard_check_pressed(vk_enter) || global.jpressed[0,1]
        {
        audio_play_sound(snd_button_press,0,0)
        room = rm_upgrade
        current_question++
        if current_question &gt;= questions
        current_question = 0
        }
    }
if global.js = 0
draw_sprite(spr_mouse,mouse_check_button(1),mouse_x,mouse_y)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
