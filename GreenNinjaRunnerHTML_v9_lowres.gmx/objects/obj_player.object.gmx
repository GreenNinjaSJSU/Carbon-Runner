<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_green_ninja_running</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_double_jump = 1
//global.passed_super_quiz = 1

if global.upgrade_wind
    &amp;&amp; global.upgrade_sun
    &amp;&amp; global.upgrade_water
    {
    background_index[0] = bg_upgrade5
    background_index[1] = bg_upgrade4
    background_index[2] = bg_upgrade3
    background_index[3] = bg_upgrade2
    background_index[4] = bg_upgrade1
    background_visible[4] = 1
    }

if global.passed_super_quiz
    {
    background_index[1] = bg_rainbow4
    background_index[2] = bg_rainbow3
    background_index[3] = bg_rainbow2
    background_index[4] = bg_rainbow1
    }

reached_upgrade_screen = 0
image_speed = .6
image_speed_start = image_speed
global.pan_speed = -22
global.pan_speed_start = global.pan_speed
dead = 0

punching = 0

global.defeated_by = -1

global.item_scale = 1.5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//y = 0
//vspeed = 0
/*
if image_index = 0
    {
    audio_play_sound(snd_step,0,0)
    }
*/

if global.passed_super_quiz
    {
    if random(10) &gt; 9
        {
        instance_create(random(room_width),-room_height/2 + random(room_height / 2),obj_firework)
        }
    }

//vspeed &gt; 3 &amp;&amp;
if !collision_circle(x,y+100,200,obj_platform,0,1)
if !punching
    {
    if sprite_index != spr_green_ninja_uppercut
        {
        
        sprite_index = spr_green_ninja_jumping
        image_index = image_number - 1
        }
    }

if global.passed_super_quiz
    {
    instance_create(x,y,obj_rainbow)
    instance_create(x+18,y,obj_rainbow)
    }

if keyboard_check_pressed(ord("U"))
    room = rm_upgrade
/*if sprite_index = spr_green_ninja_gliding
image_angle = point_direction(0,0,global.pan_speed + global.level_speed,vspeed) / 4
else
image_angle = 0
*/
/*
if keyboard_check_pressed(vk_enter)
    {
    if dead
        room = rm_upgrade
    }
*/

if keyboard_check_pressed(vk_escape) || global.jpressed[0,8]
    {
    audio_play_sound(snd_button_press,0,0)
    instance_create(0,0,obj_pause)
    }
//scr_game_end()

if !dead
    view_yview[0] = y/2 - view_hview[0]/4

background_y[0] = view_yview[0]
background_y[1] = view_yview[0]
background_y[2] = view_yview[0]
background_y[3] = view_yview[0]
background_y[4] = view_yview[0]

key_up = global.jactive[0,1]
key_up_pressed = global.jpressed[0,1]
key_up_released = global.jreleased[0,1]

key_slide = global.jactive[0,2] || global.jright_z_active[0] || global.jactive[0,5]
key_slide_pressed = global.jpressed[0,2] || global.jright_z_active[0] || global.jpressed[0,5]
key_slide_released = global.jreleased[0,2] || global.jright_z_active[0] || global.jreleased[0,5]

key_punch = global.jactive[0,3] || global.jleft_z_active[0] || global.jactive[0,6]
key_punch_pressed = global.jpressed[0,3] || global.jleft_z_pressed[0] || global.jpressed[0,6]
key_punch_released = global.jreleased[0,3] || global.jleft_z_released[0] || global.jreleased[0,6]


/*
if global.js = 1
    {
    if joystick_check_button(1,1)
        {
        key_up = 1
        }
    
    if joystick_check_button(1,1)
        {
        key_up_pressed = 1
        }
    
    if joystick_check_button(1,2)
        {
        key_slide = 1
        }
    
    if joystick_check_button(1,2)
        {
        key_slide_pressed = 1
        }
    
    if joystick_check_button(1,3)
        {
        key_punch = 1
        }
    
    if joystick_check_button(1,3)
        {
        key_punch_pressed = 1
        }
    }
*/

if (reached_upgrade_screen = 0 &amp;&amp; global.game_mode = 2) || global.game_mode = 1
    {
    if !dead
        {
        if sprite_index = spr_green_ninja_running
            image_speed = 1
        
        //If in the air
        if !collision_line(x-16,y+sprite_height/2,x+16,y+sprite_height/2,obj_platform,0,1)
            {   
            gravity = 3 * max(global.level_speed , 1)
            
            //If gliding, then fly longer distances
            if sprite_index = spr_green_ninja_sliding || sprite_index = spr_green_ninja_gliding
                {
                //if vspeed &gt; 0
                motion_add(90,.5 * max(global.level_speed , 1))
                }

            //Jump higher when holding up arrow
            if keyboard_check(vk_up) || keyboard_check(vk_space) || key_up
                {
                motion_add(90,1.7 * max(global.level_speed , 1))
                }
                
            //Double Jump
            if !collision_line(x-16,y+sprite_height/2 + 10,x+16,y+sprite_height/2 + 10,obj_platform,0,1)
            //if sprite_index = spr_green_ninja_jumping
                {
                if global.upgrade_wind
                if can_double_jump
                    { 
                    if keyboard_check_pressed(vk_up) || keyboard_check_pressed(vk_space) || key_up_pressed
                        {
                        audio_play_sound(snd_lift_off,0,0)
                        image_index = 0
                        image_speed = .8
                        vspeed = -35 * max(global.level_speed , 1)
                        punching = 0
                        //motion_add(90,32 * max(global.level_speed , 1))
                        can_double_jump = 0
                        sprite_index = spr_green_ninja_uppercut
                        if global.passed_super_quiz
                             {
                             audio_play_sound(snd_starshot,0,0)
                             }
                        }
                    } 
                }
            }
        else //If on the ground
            {
            can_double_jump = 1
            
            if sprite_index = spr_green_ninja_jumping
                {
                image_speed = 1
                sprite_index = spr_green_ninja_running
                }
            //if keyboard_check_released(ord("Z"))   
            //    {
                //y -= 96
            //    }
            
            //Primary Jump
            if keyboard_check(vk_up) || keyboard_check(vk_space) || key_up
                {
                punching = 0
                vspeed = -28 * max(global.level_speed , 1) //24
                audio_play_sound(snd_lift_off,0,0)
                
                if sprite_index != spr_green_ninja_punching &amp;&amp; sprite_index != spr_green_ninja_sword_slash
                    {
                    if !global.upgrade_wind
                    { 
                    //if keyboard_check(vk_up)
                    //    {
                         motion_add(90,.6 * max(global.level_speed , 1))
                         sprite_index = spr_green_ninja_uppercut
                    //     }
                    }
                    //audio_play_sound(snd_jump,0,0)
                    sprite_index = spr_green_ninja_jumping
                    image_speed = .5
                    image_index = 0
                    }
                }
            else
                {
                //if vspeed &gt; 7
                    //if !audio_is_playing(snd_hit_ground)
                    //audio_play_sound(snd_hit_ground,0,0)
                if !dead
                    {
                    vspeed = 0
                    
                    }
                }
                
            gravity = 0
            }
            
        if !dead
        repeat(60)
        if collision_line(x-16,y+sprite_height/2+1,x+16,y+sprite_height/2+1,obj_platform,0,1)
            {
            y -= 1
            }
        
        score++
        
        if sprite_index != spr_green_ninja_punching &amp;&amp; sprite_index != spr_green_ninja_sword_slash
            {
            if keyboard_check_pressed(ord("Z")) || key_slide_pressed
                {
                sprite_index = spr_green_ninja_duck
                 
                if !global.upgrade_water
                    {
                    sprite_index = spr_green_ninja_sliding
                    audio_play_sound(snd_slide,1,0)
                    }
                else
                    { 
                    sprite_index = spr_green_ninja_waterslide
                    audio_play_sound(snd_waterslide,1,0)
                    }
                }
            
            if keyboard_check_released(ord("Z")) || key_slide_released
                {
                sprite_index = spr_green_ninja_running
                sound_stop(snd_slide)
                sound_stop(snd_waterslide)
                }
            }    
            
        if (keyboard_check_pressed(ord("X")) || key_punch_pressed) &amp;&amp; !punching //&amp;&amp; (sprite_index = spr_green_ninja_running || // sprite_index != spr_green_ninja_punching
            {
            if obj_platform_spawner.alarm[0] &gt; 20
            obj_platform_spawner.alarm[0] -= 20
            punching = 1
            audio_play_sound(snd_punch,1,0)
            image_speed = .8
            image_index = 0
            if !global.upgrade_sun
                {
                global.pan_speed *= 2
                sprite_index = spr_green_ninja_punching
                }
            else
                {
                global.pan_speed *= 1.5
                sprite_index = spr_green_ninja_sword_slash
                instance_create( x, y, obj_slash_proj )
                audio_play_sound(snd_slash,1,0)
                }
            }
        /*
        /*
        if keyboard_check_released(ord("X")) &amp;&amp; punching &amp;&amp; sprite_index = spr_green_ninja_punching
            {
            punching = 0
            global.pan_speed /= 2    
            }
            */
        if sprite_index != spr_green_ninja_punching &amp;&amp; sprite_index != spr_green_ninja_sword_slash
        if keyboard_check(ord("Z")) || key_slide
            {
            if !collision_line(x-16,y+sprite_height/2 + 128,x+16,y+sprite_height/2,obj_platform,0,1)
                {
                sprite_index = spr_green_ninja_gliding
                }
            else 
                {
                if keyboard_check(vk_up) || key_up
                    {
                    sprite_index = spr_green_ninja_sliding_start
                    }
                else
                    {
                    if !collision_line(x-16,y+sprite_height/2 + 64,x+16,y+sprite_height/2,obj_platform,0,1)
                        {
                        sprite_index = spr_green_ninja_sliding_start
                        }
                    else
                        {
                        if !global.upgrade_water
                            sprite_index = spr_green_ninja_sliding
                        else
                            sprite_index = spr_green_ninja_waterslide
                        }
                    }
                }
            }
        }
    else
        {
        gravity = 2
        image_angle += 1
        global.pan_speed = -1
        image_speed = .1
        }
    if y &gt; room_height + 320
        {
        global.level_speed = .8
        //score = 0
        if global.defeated_by &gt; -1 || global.defeated_by = -4 || global.defeated_by = -3
            {
            if global.bad &gt;= obj_hud.badmax
                room = rm_game_over
            else
                room = rm_quiz_screen
            }
        else
            {
            room = rm_game_over
            }
        }
    }
else
if dead = 1
    {
    speed = 0
    gravity = 0
    if global.pan_speed &lt; 0
    global.pan_speed++
    image_speed = 0
    }
else
if dead = 2
    {
    
    }

/*
if keyboard_check_released(ord("X"))   
    {
    image_speed = image_speed_start
    sprite_index = spr_green_ninja_running
    }

*/
/*
if keyboard_check(ord("X"))   
    {
    motion_add(0,.1)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index = spr_green_ninja_uppercut
    {
    sprite_index = spr_green_ninja_jumping
    image_speed = 1
    }

if sprite_index = spr_green_ninja_punching || sprite_index = spr_green_ninja_sword_slash
    {
    sprite_index = spr_green_ninja_running
    punching = 0
    global.pan_speed = global.pan_speed_start //= 2
    image_speed = 1
    }
    
if sprite_index = spr_green_ninja_jumping
    {
    //if vspeed &gt; 0
    if !collision_line(x-16,y+sprite_height/2,x+16,y+sprite_height/2,obj_platform,0,1)
        {
        image_speed = 0
        image_index = image_number - 1
        }
    else
        {
        image_speed = 1
        sprite_index = spr_green_ninja_running
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawSprite = sprite_index

if global.passed_super_quiz
    {
    switch (drawSprite)
        {
        case spr_green_ninja_running:
            drawSprite = spr_green_ninja_running_skin
        break;
        case spr_green_ninja_punching:
            drawSprite = spr_green_ninja_punching_skin
        break;
        case spr_green_ninja_sword_slash:
            drawSprite = spr_green_ninja_sword_slash_skin
        break;
        case spr_green_ninja_sliding:
            drawSprite = spr_green_ninja_sliding_skin
        break;
        case spr_green_ninja_sliding_start:
            drawSprite = spr_green_ninja_sliding_start_skin
        break;
        case spr_green_ninja_waterslide:
            drawSprite = spr_green_ninja_waterslide_skin
        break;
        case spr_green_ninja_uppercut:
            drawSprite = spr_green_ninja_uppercut_skin
        break;
        case spr_green_ninja_jumping:
            drawSprite = spr_green_ninja_jumping_skin
        break;
        case spr_green_ninja_gliding:
            drawSprite = spr_green_ninja_gliding_skin
        break;
        case spr_green_ninja_death:
            drawSprite = spr_green_ninja_death_skin
        break;
        
        }
    }

draw_sprite_ext(drawSprite , image_index , x , y , 1 , 1 , image_angle,c_white,1)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>76,62</point>
    <point>82,82</point>
  </PhysicsShapePoints>
</object>
